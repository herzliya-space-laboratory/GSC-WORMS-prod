{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Part.svelte",
    "../../Options.svelte",
    "../../ParamList.svelte",
    "../../CalList.svelte",
    "../../SSTList.svelte",
    "../../CategoryList.svelte",
    "../../CategoryListOptions.svelte",
    "../../UnitList.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {\n    validateParam,\n    validateCategory,\n    validateName\n  } from \"../../API/validations.js\";\n  import { duplicate } from \"../../API/utilities.js\";\n  import { openErrors, currentPage } from \"../../stores.js\";\n\n  import ParamOptions from \"../params/ParamOptions.svelte\";\n  import AddParam from \"../params/AddParam.svelte\";\n  import ParamList from \"../params/ParamList.svelte\";\n\n  import CalList from \"../calibrations/CalList.svelte\";\n\n  import SSTList from \"../ssts/SSTList.svelte\";\n  import AddSST from \"../ssts/AddSST.svelte\";\n  import SSTOptions from \"../ssts/SSTOptions.svelte\";\n\n  import CategoryList from \"../categories/CategoryList.svelte\";\n\n  import { onMount } from \"svelte\";\n\n  export let partName;\n  export let data;\n  export let units;\n\n  let part = data[partName];\n  let category;\n  let sst;\n  let param;\n\n  const addSST = newSST => {\n    if (category) {\n      const errs = validateCategory(newSST.detail, category.serviceSubTypes);\n      if (errs.length > 0) {\n        openErrors(errs);\n        return;\n      }\n      category.serviceSubTypes = [...category.serviceSubTypes, newSST.detail];\n      sst = category.serviceSubTypes[category.serviceSubTypes.length - 1];\n      param = null;\n    }\n  };\n\n  const deleteSST = () => {\n    if (category)\n      category.serviceSubTypes = category.serviceSubTypes.filter(\n        item => item.id !== sst.id\n      );\n    sst = null;\n    param = null;\n  };\n\n  const updateSST = newSST => {\n    const testArr = category.serviceSubTypes.filter(elem => elem !== sst);\n    const errs = validateCategory(newSST.detail, testArr);\n    if (errs.length > 0) {\n      openErrors(errs);\n      return;\n    }\n    const index = category.serviceSubTypes.indexOf(sst);\n    sst = newSST.detail;\n    category.serviceSubTypes[index] = newSST.detail;\n  };\n\n  const addParam = newParam => {\n    if (sst) {\n      const errs = validateName(newParam.detail, sst.params);\n      if (errs !== \"\") {\n        openErrors([errs]);\n        return;\n      }\n      sst.params = [...sst.params, newParam.detail];\n      param = sst.params[sst.params.length - 1];\n    }\n  };\n\n  const deleteParam = () => {\n    const index = sst.params.indexOf(param);\n    sst.params = sst.params.filter(item => item !== param);\n    param = sst.params[index - 1];\n  };\n\n  const updateParam = newParam => {\n    try {\n      const testArr = sst.params.filter(elem => elem !== param);\n      const errs = validateParam(newParam.detail, testArr);\n      if (errs.length > 0) {\n        openErrors(errs);\n        return;\n      }\n      const index = sst.params.indexOf(param);\n      param = newParam.detail;\n      sst.params[index] = newParam.detail;\n      parseParamDateRange(sst.params[index]);\n      M.toast({ html: \"Saved!\", classes: \"green\" });\n    } catch (err) {\n      M.toast({ html: err, classes: \"red\" });\n    }\n  };\n\n  const duplicateParam = () => {\n    sst.params = duplicate(param, sst.params);\n  };\n\n  const duplicateSST = () => {\n    category.serviceSubTypes = duplicate(sst, category.serviceSubTypes);\n  };\n\n  function parseISOString(iso) {\n    const [date, time] = iso.split(\"T\");\n    const [year, month, day] = date.split(\"-\");\n    const [hours, mins, secs] = time.split(\":\");\n    return `${day}/${month}/${year} ${hours}:${mins}:${secs ? secs : \"00\"}`;\n  }\n\n  function parseParamDateRange(param) {\n    if (param.type === \"datetime\") {\n      if (param.rangeStart) param.rangeStart = parseISOString(param.rangeStart);\n      if (param.rangeStart) param.rangeEnd = parseISOString(param.rangeEnd);\n    }\n  }\n  onMount(M.AutoInit);\n</script>\n\n<style>\n  div.container {\n    margin: 0 auto;\n    max-width: unset;\n    width: 95%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col l1\">\n      <a\n        on:click={() => currentPage.set('home')}\n        href=\"#!\"\n        class=\"btn-floating btn-large waves-effect waves-light red\">\n        <i class=\"material-icons\">arrow_back</i>\n      </a>\n    </div>\n    <div class=\"col l6 offset-l2\">\n      <h2 class=\"red-text center\">{partName}</h2>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col l2 m6 s12\">\n      <div class=\"row\">\n        <div class=\"col l2 m2 s2\">\n          <button on:click={() => console.log(data)}>Log Data</button>\n        </div>\n        <div class=\"col l2 m2 s2 offset-l1 offset-m2 offset-s2\">\n          <h5>Categories</h5>\n        </div>\n      </div>\n      <CategoryList bind:curr={category} bind:categories={part.serviceTypes} />\n    </div>\n\n    <div class=\"col l2 m6 s12\">\n      <div class=\"row\">\n        <div class=\"col l2 m2 s2\">\n          <AddSST on:addSST={addSST} {partName} />\n        </div>\n        <div class=\"col l2 m2 s2 offset-l1 offset-m2 offset-s2\">\n          <h5>{partName}</h5>\n        </div>\n        <div class=\"col l1 m1 s1 offset-l3 offset-m3 offset-s3\">\n          <SSTOptions\n            on:updateSST={updateSST}\n            on:deleteSST={deleteSST}\n            on:duplicateSST={duplicateSST}\n            bind:sst />\n        </div>\n      </div>\n      {#if !category}\n        <h6 class=\"center\">\n          <i>Please select a category</i>\n        </h6>\n      {:else}\n        <SSTList\n          name={partName}\n          bind:ssts={category.serviceSubTypes}\n          bind:curr={sst} />\n      {/if}\n    </div>\n\n    <div class=\"col l2 m6 s12\">\n      <div class=\"row\">\n        <div class=\"col l2 m2 s2\">\n          <AddParam on:addParam={addParam} />\n        </div>\n        <div class=\"col l2 m2 s2 offset-l2 offset-m2 offset-s2\">\n          <h5>Paramtetes</h5>\n        </div>\n      </div>\n      {#if !sst}\n        <h6 class=\"center\">\n          <i>Please select a {partName}</i>\n        </h6>\n      {:else}\n        <ParamList bind:param bind:params={sst.params} />\n      {/if}\n    </div>\n\n    <div class=\"col l3 m6 s12\">\n      <h5 class=\"center\">Parameter Options</h5>\n      {#if !param}\n        <h6 class=\"center\">\n          <i>No Parameter Selected</i>\n        </h6>\n      {:else}\n        <ParamOptions\n          bind:param\n          bind:calibrations={part.calibrations}\n          bind:units\n          on:deleteParam={deleteParam}\n          on:updateParam={updateParam}\n          on:duplicateParam={duplicateParam} />\n      {/if}\n    </div>\n\n    <div class=\"col l3 m6 s12\">\n      <CalList bind:calibrations={part.calibrations} />\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import UnitList from \"../units/UnitList.svelte\";\n  import CategoryListOptions from \"./../categories/CategoryListOptions.svelte\";\n  import { onMount } from \"svelte\";\n  import { currentPage } from \"../../stores.js\";\n\n  export let units;\n  export let data;\n\n  let part = undefined;\n\n  onMount(() => {\n    M.AutoInit();\n  });\n</script>\n\n<style>\n  div.container {\n    margin: 0 auto;\n    max-width: unset;\n    width: 95%;\n  }\n  .collection {\n    overflow: auto;\n    max-height: 69vh;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col l1\">\n      <a\n        href=\"#!\"\n        on:click={() => currentPage.set('home')}\n        class=\"btn-floating btn-large waves-effect waves-light red\">\n        <i class=\"material-icons\">arrow_back</i>\n      </a>\n    </div>\n    <div class=\"col l6 offset-l2\">\n      <h2 class=\"red-text center\">Options</h2>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col l3\">\n      <UnitList bind:units />\n    </div>\n\n    <div class=\"col l3\">\n      <h5 class=\"center\">Part</h5>\n      <div class=\"collection\">\n        <a\n          href=\"#!\"\n          class=\"collection-item\"\n          class:active={part === 'telemetry'}\n          on:click={() => (part = 'telemetry')}>\n          Telemetry\n        </a>\n        <a\n          href=\"#!\"\n          class=\"collection-item\"\n          class:active={part === 'telecommands'}\n          on:click={() => (part = 'telecommands')}>\n          Telecommands\n        </a>\n      </div>\n    </div>\n\n    <div class=\"col l3\">\n      {#if part}\n        <CategoryListOptions bind:categories={data[part].serviceTypes} {part} />\n      {:else}\n        <span>\n          <i>Please select a part</i>\n        </span>\n      {/if}\n    </div>\n  </div>\n\n</div>\n",
    "<script>\n  export let params;\n  export let param;\n  let searchTerm = \"\";\n\n  $: if (!params) params = [];\n  $: filteredList = params.filter(\n    item => item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1\n  );\n</script>\n\n<style>\n  .collection {\n    overflow: auto;\n    max-height: 69vh;\n  }\n</style>\n\n<div class=\"input-field\">\n  <i class=\"material-icons prefix\">search</i>\n  <input id=\"search\" type=\"search\" bind:value={searchTerm} />\n</div>\n{#if filteredList.length === 0}\n  <span>\n    <i>Empty</i>\n  </span>\n{:else}\n  <div class=\"collection\">\n    {#each filteredList as paramElem, i (i)}\n      <a\n        href=\"#!\"\n        class:active={!!param && param.name === paramElem.name}\n        class=\"collection-item\"\n        on:click={() => (param = paramElem)}>\n        {`${i + 1}. ${paramElem.name} <${paramElem.type}>`}\n      </a>\n    {/each}\n  </div>\n{/if}\n",
    "<script>\n  import FunctionCal from \"./FunctionCal.svelte\";\n  import EnumCal from \"./EnumCal.svelte\";\n  import AddCalibration from \"./AddCalibration.svelte\";\n\n  import { validateCalibration, validateName } from \"../../API/validations\";\n  import { openErrors } from \"../../stores.js\";\n\n  export let calibrations;\n  let searchTerm = \"\";\n  let filteredList = calibrations;\n\n  $: filteredList = calibrations.filter(\n    item => item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1\n  );\n\n  const addCalibration = data => {\n    let newCal = data.detail;\n    const valErrs = validateName(newCal.name, calibrations);\n    if (valErrs.length > 0) {\n      openErrors(valErrs);\n      return;\n    }\n    calibrations = [...calibrations, newCal];\n  };\n\n  const deleteCal = data => {\n    calibrations = calibrations.filter(cal => cal.id !== data.detail);\n  };\n\n  const updateCal = ctx => {\n    const cal = ctx.detail;\n    const testArr = calibrations.filter(item => item.id !== cal.id);\n    const valErrs = validateCalibration(cal, testArr);\n    if (valErrs.length > 0) {\n      openErrors(valErrs);\n      return;\n    }\n\n    const curr = calibrations.find(item => item.id === cal.id);\n    const index = calibrations.indexOf(curr);\n    calibrations[index] = cal;\n  };\n</script>\n\n<style>\n  .collection {\n    overflow: auto;\n    max-height: 34vh;\n  }\n</style>\n\n<div class=\"row\">\n  <div class=\"col l2 m2 s2\">\n    <AddCalibration on:addCalibration={addCalibration} />\n  </div>\n  <div class=\"col l2 m2 s2 offset-l2 offset-m2 offset-s2\">\n    <h5>Calibration</h5>\n  </div>\n</div>\n<div class=\"input-field\">\n  <i class=\"material-icons prefix\">search</i>\n  <input id=\"search\" type=\"search\" bind:value={searchTerm} />\n</div>\n{#if filteredList.length === 0}\n  <span>\n    <i>Empty</i>\n  </span>\n{:else}\n  <ul class=\"collection\">\n    {#each filteredList as c, i (c.id)}\n      {#if c.type === 'polynomial'}\n        <li class=\"collection-item\">\n          <FunctionCal\n            bind:calibration={c}\n            on:deleteCal={deleteCal}\n            on:updateCal={updateCal} />\n        </li>\n      {/if}\n    {/each}\n  </ul>\n  <ul class=\"collection\">\n    {#each filteredList as c, i (c.id)}\n      {#if c.type === 'options'}\n        <li class=\"collection-item\">\n          <EnumCal\n            bind:calibration={c}\n            on:deleteCal={deleteCal}\n            on:updateCal={updateCal} />\n        </li>\n      {/if}\n    {/each}\n  </ul>\n{/if}\n",
    "<script>\n  export let ssts;\n  export let curr;\n\n  let searchTerm = \"\";\n  let filteredList = ssts;\n\n  $: {\n    if (/^\\d+$/.test(searchTerm)) {\n      const num = +searchTerm;\n      filteredList = ssts.filter(item => item.id === num);\n    } else {\n      filteredList = ssts.filter(\n        item => item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1\n      );\n    }\n  }\n</script>\n\n<style>\n  .collection {\n    overflow: auto;\n    max-height: 69vh;\n  }\n</style>\n\n<div class=\"input-field\">\n  <i class=\"material-icons prefix\">search</i>\n  <input id=\"search\" type=\"search\" bind:value={searchTerm} />\n</div>\n{#if filteredList.length === 0}\n  <span>\n    <i>Empty</i>\n  </span>\n{:else}\n  <div class=\"collection\">\n    {#each filteredList as sst (sst.id)}\n      <a\n        href=\"#!\"\n        class:active={!!curr && curr.id === sst.id}\n        class=\"collection-item\"\n        on:click={() => (curr = sst)}>\n        {sst.name}\n      </a>\n    {/each}\n  </div>\n{/if}\n",
    "<script>\n  export let categories;\n  export let curr;\n\n  let searchTerm = \"\";\n  let filteredList = categories;\n\n  $: {\n    if (/^\\d+$/.test(searchTerm)) {\n      const num = +searchTerm;\n      filteredList = categories.filter(item => item.id === num);\n    } else {\n      filteredList = categories.filter(\n        item => item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1\n      );\n    }\n  }\n</script>\n\n<style>\n  .collection {\n    overflow: auto;\n    max-height: 69vh;\n  }\n</style>\n\n<div class=\"input-field\">\n  <i class=\"material-icons prefix\">search</i>\n  <input id=\"search\" type=\"search\" required bind:value={searchTerm} />\n</div>\n{#if filteredList.length === 0}\n  <span>\n    <i>Empty</i>\n  </span>\n{:else}\n  <div class=\"collection\">\n    {#each filteredList as st (st.id)}\n      <a\n        href=\"#!\"\n        class:active={!!curr && curr.id === st.id}\n        class=\"collection-item\"\n        on:click={() => (curr = st)}>\n        {st.name}\n      </a>\n    {/each}\n  </div>\n{/if}\n",
    "<script>\n  import CategoryOptions from \"./CategoryOptions.svelte\";\n  import AddCategory from \"./AddCategory.svelte\";\n  import { validateCategory } from \"../../API/validations.js\";\n  import { duplicate } from \"../../API/utilities.js\";\n  import { openErrors } from \"../../stores\";\n\n  export let categories;\n  export let part;\n\n  let searchTerm = \"\";\n  let filteredList = categories;\n\n  $: {\n    if (/^\\d+$/.test(searchTerm)) {\n      const num = +searchTerm;\n      filteredList = categories.filter(item => item.id === num);\n    } else {\n      filteredList = categories.filter(\n        item => item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1\n      );\n    }\n  }\n\n  const addCategory = newCategory => {\n    const category = newCategory.detail;\n    const valErrs = validateCategory(category, categories);\n    if (valErrs.length > 0) {\n      openErrors(valErrs);\n      return;\n    }\n    categories = [...categories, category];\n  };\n\n  const deleteCategory = evt => {\n    categories = categories.filter(category => category.id !== evt.detail);\n  };\n\n  const updateCategory = ctx => {\n    const { updated, old } = ctx.detail;\n    const testArr = categories.filter(item => item !== old);\n    const valErrs = validateCategory(updated, testArr);\n    if (valErrs.length > 0) {\n      openErrors(valErrs);\n      return;\n    }\n\n    const curr = categories.find(item => item === old);\n    const index = categories.indexOf(curr);\n    categories[index] = updated;\n  };\n\n  const duplicateCategory = ctx => {\n    const id = ctx.detail;\n    const category = categories.find(item => item.id === id);\n    categories = duplicate(category, categories);\n  };\n</script>\n\n<style>\n  .collection {\n    overflow: auto;\n    max-height: 69vh;\n  }\n</style>\n\n<div class=\"row\">\n  <div class=\"col l2 m2 s2\">\n    <AddCategory on:addCategory={addCategory} />\n  </div>\n  <h5 class=\"col l2 m2 s2 offset-l2 offset-m2 offset-s2\">Categories</h5>\n</div>\n\n<div class=\"input-field\">\n  <i class=\"material-icons prefix\">search</i>\n  <input id=\"search\" type=\"search\" required bind:value={searchTerm} />\n</div>\n{#if filteredList.length === 0}\n  <span>\n    <i>Empty</i>\n  </span>\n{:else}\n  <div class=\"collection\">\n    {#each filteredList as st (st.id)}\n      <CategoryOptions\n        bind:category={st}\n        {part}\n        on:deleteCategory={deleteCategory}\n        on:updateCategory={updateCategory}\n        on:duplicateCategory={duplicateCategory} />\n    {/each}\n  </div>\n{/if}\n",
    "<script>\n  import AddUnit from \"./AddUnit.svelte\";\n\n  export let units;\n\n  const addUnit = newUnit => {\n    units = units.add(newUnit.detail);\n  };\n  const deleteUnit = unit => {\n    units.delete(unit);\n    units = units;\n  };\n</script>\n\n<style>\n  .collection {\n    overflow: auto;\n    max-height: 69vh;\n  }\n</style>\n\n<div class=\"row\">\n  <div class=\"col l2 m2 s2\">\n    <AddUnit on:addUnit={addUnit} />\n  </div>\n  <div class=\"col l2 m2 s2 offset-l2 offset-m2 offset-s2\">\n    <h5>Units</h5>\n  </div>\n</div>\n<ul class=\"collection\">\n  {#each [...units] as unit (unit)}\n    <li href=\"#!\" class=\"collection-item\">\n      {unit}\n      <a href=\"#!\" class=\"waves-effect waves-red btn-flat\">\n        <i class=\"material-icons\" on:click={() => deleteUnit(unit)}>delete</i>\n      </a>\n    </li>\n  {/each}\n</ul>\n"
  ],
  "names": [],
  "mappings": "AA+HE,GAAG,UAAU,eAAC,CAAC,AACb,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,GAAG,AACZ,CAAC;AClHD,GAAG,UAAU,cAAC,CAAC,AACb,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC;ACbD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC;AC+BD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC;AC7BD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC;ACHD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC;ACqCD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC;AChDD,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,IAAI,AAClB,CAAC"
}